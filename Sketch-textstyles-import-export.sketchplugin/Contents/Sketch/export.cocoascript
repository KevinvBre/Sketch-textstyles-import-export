// Import and export text styles

var doc;

function initVars(context) {
    doc = context.document;
}

function saveFonts(context,target) {
    initVars(context)
    var app = NSApp.delegate();

    var definedTextStyles = [];
    var text = doc.documentData().layerTextStyles().objects();

    for (var i = 0; i < text.count(); i++) {
        var style = text.objectAtIndex(i);
        var attributes = style.style().textStyle().attributes();
        var textStyle = style

        definedTextStyles.push({
            "attributes": attributes,
            "textStyle": style,
            "name": style.name()
        });

    }

    if (definedTextStyles.length > 0) {

        var save = NSSavePanel.savePanel();
        save.setNameFieldStringValue("text-styles.json");
        save.setAllowedFileTypes([@"json"]);
        save.setAllowsOtherFileTypes(false);
        save.setExtensionHidden(false);

        if (save.runModal()) {

            var styles = [];

            for (var i = 0; i < definedTextStyles.length; i++) {
                var definedTextStyle = definedTextStyles[i];
                var color = definedTextStyle.attributes.MSAttributedStringColorAttribute;

                if (color != null) {
                    var red = color.red();
                    var green = color.green();
                    var blue = color.blue();
                    var alpha = color.alpha();
                }

                var name = String(definedTextStyle.name);
                var family = String(definedTextStyle.attributes.NSFont.fontDescriptor().objectForKey(NSFontNameAttribute))
                var size = String(definedTextStyle.attributes.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute)) * 1

                var par = definedTextStyle.attributes.NSParagraphStyle;

                if (par != null) {
                    var align = par.alignment();
                    var lineHeight = par.maximumLineHeight();
                    var paragraphSpacing = par.paragraphSpacing();
                }

                var spacing = String(definedTextStyle.attributes.NSKern) * 1;

                var text = definedTextStyle.attributes.MSAttributedStringTextTransformAttribute;

                if (text != null) {
                    var textTransform = String(definedTextStyle.attributes.MSAttributedStringTextTransformAttribute) * 1;
                } else {
                    var textTransform = 0;
                }

                var strike = String(definedTextStyle.attributes.NSStrikethrough) * 1
                var underline = String(definedTextStyle.attributes.NSUnderline) * 1

                styles.push({
                    name: name,
                    font: family,
                    size: size,
                    color: {
                        red: red,
                        green: green,
                        blue: blue,
                        alpha: alpha
                    },
                    alignment: align,
                    spacing: spacing,
                    lineHeight: lineHeight,
                    paragraphSpacing: paragraphSpacing,
                    textTransform: textTransform,
                    strikethrough: strike,
                    underline: underline
                });

            };

            var fileData = { "styles": styles };
            var path = save.URL().path();
            var file = NSString.stringWithString(JSON.stringify(fileData));

            [file writeToFile:path atomically:true encoding:NSUTF8StringEncoding error:null];

            [doc showMessage: 'Text style(s) are succesfully saved.']
        }

    } else { NSApp.displayDialog("There are no text styles to export."); }

}

function exportFonts(context) {

    saveFonts(context, "document");
    ga(context, "fontExport");
}


/*

    Everything below this line except the trackingID is a copy paste from:
    https://github.com/Ashung/Automate-Sketch

*/


function ga(context, eventCategory) {

    var trackingID = "UA-25194603-2";

    var uuidKey = "google.analytics.uuid";
    var uuid = NSUserDefaults.standardUserDefaults().objectForKey(uuidKey);
    if (!uuid) {
        uuid = NSUUID.UUID().UUIDString();
        NSUserDefaults.standardUserDefaults().setObject_forKey(uuid, uuidKey);
    }

    var appName = encodeURI(context.plugin.name()),
        appId = context.plugin.identifier(),
        appVersion = context.plugin.version();

    var url = "https://www.google-analytics.com/collect?v=1";
    // Tracking ID
    url += "&tid=" + trackingID;
    // Source
    url += "&ds=sketch" + MSApplicationMetadata.metadata().appVersion;
    // Client ID
    url += "&cid=" + uuid;
    // User GEO location
    url += "&geoid=" + NSLocale.currentLocale().countryCode();
    // User language
    url += "&ul=" + NSLocale.currentLocale().localeIdentifier().toLowerCase();
    // pageview, screenview, event, transaction, item, social, exception, timing
    url += "&t=event";
    // App Name
    url += "&an=" + appName;
    // App ID
    url += "&aid=" + appId;
    // App Version
    url += "&av=" + appVersion;
    // Event category
    url += "&ec=" + encodeURI(eventCategory);
    // Event action
    // url += "&ea=" + encodeURI(eventAction);
    url += "&ea=" + encodeURI(context.command.identifier());
    // Event label
    // if (eventLabel) {
    //     url += "&el=" + encodeURI(eventLabel);
    // }
    // Event value
    // if (eventValue) {
    //     url += "&ev=" + encodeURI(eventValue);
    // }

    var session = NSURLSession.sharedSession();
    var task = session.dataTaskWithURL(NSURL.URLWithString(NSString.stringWithString(url)));
    task.resume();

}
